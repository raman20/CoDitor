<html>

<head>
    <title>Realtime Editor/Collaboration</title>
    <script>
        var ROOM_ID = "<%= roomId %>"
    </script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <style>
        .main {
            float: left;
        }

        video {
            float: top;
            width: 200px;
            height: 200px;
        }

        .editor,
        .output {
            float: top;
        }
    </style>
</head>

<body>
    <h3>Realtime Editor/Collaboration</h3>
    <p id="share"></p>
    <div class="main">
        <div class="editor">
            <select id="langs">
                <option id="null" value="" selected>select lang.</option>
                <option id="c" value="4">C</option>
                <option id="cpp14" value="2">C++</option>
                <option id="java" value="3">Java JDK 14</option>
                <option id="python3" value="3">Python 3</option>
            </select>
        </div>
        <div class="editor">
            <textarea rows="30" cols="50" id="editor" style="background-color:rgb(255, 255, 255);color:rgb(0, 0, 0)"
                placeholder="Type Your Text..."></textarea>
        </div>
    </div>

    <div class="main">
        <div class='output'>
            <textarea rows="30" cols="50" id="output" style="background-color:rgb(255, 255, 255);color:rgb(0, 0, 0)"
                placeholder="Your output" disabled></textarea>
        </div>
        <div class="output">
            <img id="loading"/>
            <button id="run"> Run </button>
        </div>
    </div>

    <div class="main">
        <video id="my_video" muted></video>
        <video id="incoming_video"></video>
    </div>

    <script src="./socket.io/socket.io.js"></script>
    <script>
        let share = document.getElementById("share");
        share.innerText = `share room id -> ${ROOM_ID}`;
    </script>
    <script>
        var socket = io();

        const my_peer = new Peer();

        my_peer.on('open', (id) => {
            socket.emit('join room', ROOM_ID, id);
        })

        function getEl(id) {
            return document.getElementById(id)
        }
        const editor = getEl("editor")

        editor.addEventListener("keyup", (evt) => {
            const text = editor.value
            //socket.send(text)
            socket.emit("new message", text, ROOM_ID);
        })

        let my_video = document.querySelector("#my_video");
        let incoming_video = document.querySelector('#incoming_video');
        let run = document.querySelector("#run");
        let lang_select = document.querySelector("#langs");
        let output = document.querySelector("#output");
        let loading_gif = document.querySelector("#loading");

        incoming_video.addEventListener('loadedmetadata', () => {
            incoming_video.play()
        })

        my_video.addEventListener('loadedmetadata', () => { 
            my_video.play(); 
        });

        run.onclick = () => {
            if (lang_select.value == "" || editor.value == "") {
                alert("*****Please select a language*****\n*****Please write some code*****");
            }
            else {
                loading_gif.setAttribute('src', 'loading.gif')
                socket.emit("code run", ROOM_ID, editor.value, lang_select[lang_select.selectedIndex].id, lang_select.value);
            }
        }

        socket.on("code response", function (codeResp) {
            loading_gif.removeAttribute("src");
            output.value = `\nOutput -> ${codeResp["output"]} \n\nmemory -> ${codeResp["memory"]} \ntime taken -> ${codeResp["cpuTime"]}`;
        })

        navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        }).then((stream) => {

            my_video.srcObject = stream;

            my_peer.on("call", (call) => {
                call.answer(stream);
                call.on('stream', (incomingStream) => {
                    incoming_video.srcObject = incomingStream;
                })
            })


            socket.on('user connected', (userId) => {
                const call = my_peer.call(userId, stream);
                call.on('stream', (answerStream) => {
                    incoming_video.srcObject = answerStream;
                })
            })
        })

        socket.on('message', (data) => {
            editor.value = data
        })
    </script>
</body>

</html>